// Generated by CoffeeScript 1.10.0

/**
 * Created by delta54 on 31.05.15.
 */

(function() {
  'use strict';
  var debug, log;

  debug = true;

  log = function(m) {
    if (debug) {
      return console.log('imeravi: ' + m);
    }
  };

  angular.module('ui.imperavi', []).directive('uiImperavi', [
    '$timeout', '$window', function($timeout, $window) {
      return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
          assetPath: '@',
          lang: '@',
          plugins: '=',
          options: '='
        },
        link: function($scope, element, attrs, ngModel) {
          var destroy, getLang, getPlugins, isLoaded, options, restart, start;
          log('init');
          $window.loaded_plugins = [];
          isLoaded = false;
          options = $.extend(true, {
            buttonSource: true,
            focus: true,
            linebreaks: false,
            autoload_plugins: false,
            plugins: $scope.plugins ? $scope.plugins : void 0
          }, $scope.options || {});
          options.changeCallback = function(value) {
            return $timeout(function() {
              return $scope.$apply(function() {
                return ngModel.$setViewValue(value);
              });
            });
          };
          getLang = function(callback) {
            var file;
            if (typeof $scope.assetPath === 'undefined' || typeof $scope.lang === 'undefined') {
              callback();
            }
            file = $scope.assetPath + 'lang/' + $scope.lang + '.js';
            log('load lang file: ' + file);
            return $.getScript(file, function(data, textStatus, jqxhr) {
              if (jqxhr.status === 200) {
                options.lang = $scope.lang;
              }
              return callback();
            });
          };
          getPlugins = function(callback) {
            var callback_count, plugins;
            if (typeof $scope.assetPath === 'undefined') {
              callback();
            }
            plugins = [
              {
                id: 'clips',
                css: 'clips.css',
                js: 'clips.js'
              }, {
                id: 'counter',
                js: 'counter.js'
              }, {
                id: 'definedlinks',
                js: 'definedlinks.js'
              }, {
                id: 'filemanager',
                js: 'filemanager.js'
              }, {
                id: 'fontcolor',
                js: 'fontcolor.js'
              }, {
                id: 'fontsize',
                js: 'fontsize.js'
              }, {
                id: 'fullscreen',
                js: 'fullscreen.js'
              }, {
                id: 'fontfamily',
                js: 'fontfamily.js'
              }, {
                id: 'imagemanager',
                js: 'imagemanager.js'
              }, {
                id: 'limiter',
                js: 'limiter.js'
              }, {
                id: 'textdirection',
                js: 'textdirection.js'
              }, {
                id: 'textexpander',
                js: 'textexpander.js'
              }, {
                id: 'video',
                js: 'video.js'
              }, {
                id: 'table',
                js: 'table.js'
              }
            ];
            callback_count = 0;
            return angular.forEach($scope.plugins, function(plugin) {
              var file, i, ref, ref1, results;
              i = 0;
              results = [];
              while (i < plugins.length) {
                if (plugins[i].id === plugin) {
                  $window.loaded_plugins.push(plugins[i].id);
                  if ((ref = plugins[i]) != null ? ref.css : void 0) {
                    file = $scope.assetPath + 'plugins/' + plugins[i].id + '/' + plugins[i].css;
                    log('load css file: ' + file);
                    $('<link/>', {
                      rel: 'stylesheet',
                      type: 'text/css',
                      href: file
                    }).appendTo('head');
                  }
                  if ((ref1 = plugins[i]) != null ? ref1.js : void 0) {
                    file = $scope.assetPath + 'plugins/' + plugins[i].id + '/' + plugins[i].js;
                    log('load plugin: ' + file);
                    $.getScript(file, function(data, textStatus, jqxhr) {
                      ++callback_count;
                      if (callback_count === $scope.plugins.length) {
                        return callback();
                      }
                    });
                  }
                }
                results.push(i++);
              }
              return results;
            });
          };
          start = function() {
            var callback;
            callback = function() {
              if (!isLoaded) {
                log('start');
                $(element).redactor(options).redactor('insert.set', ngModel.$viewValue || '');
                return isLoaded = true;
              }
            };
            if (options.autoload_plugins) {
              return getLang(function() {
                return getPlugins(function() {
                  return callback();
                });
              });
            } else {
              return callback();
            }
          };
          destroy = function() {
            $(element).redactor('core.destroy');
            return log('destroy');
          };
          restart = function() {
            destroy();
            return start();
          };
          $scope.$watch('lang', 'plugins', 'options', function(val, old_val) {
            if (val === old_val) {
              return;
            }
            return restart();
          });
          $scope.$on('$destroy', function(event, next, current) {
            return destroy();
          });
          ngModel.$render = function() {
            return $timeout(function() {
              if (isLoaded) {
                return $(element).redactor('insert.set', ngModel.$viewValue || '').redactor('placeholder.toggle');
              }
            });
          };
          return start();
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=angular-imperavi.js.map
